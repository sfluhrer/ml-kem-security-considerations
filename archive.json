{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-10-29T00:53:27.696326+00:00",
  "repo": "sfluhrer/ml-kem-security-considerations",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOM54HI86Y-q7W",
      "title": "Include discussion of using ML-KEM in ways other than an ephemeral Key Exchange",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/issues/3",
      "state": "OPEN",
      "author": "sfluhrer",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "While using ML-KEM as a DH replacement in (say) TLS or IKE is one important use case, it's not the only one.  We should also discuss how ML-KEM might be used as a component within IES, and as authentication, and possibly other use cases.",
      "createdAt": "2024-10-04T14:48:33Z",
      "updatedAt": "2024-10-07T11:13:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good! ",
          "createdAt": "2024-10-05T11:15:54Z",
          "updatedAt": "2024-10-05T11:15:54Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "I've been thinking this over, and the goal of this draft should be to explain how to use already defined crypto (ML-KEM, specifically), and not to invent it.  It is straightforward to define an IES-ML-KEM (by simply replacing DH with ML-KEM), is that too big of an innovation?  How about using ML-KEM for authentication; should we endorse the protocol proposed in draft-celi-wiggers-tls-authkem?",
          "createdAt": "2024-10-07T01:50:52Z",
          "updatedAt": "2024-10-07T01:50:52Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think IETF has an official spec for IES. If that is true, it is more like we'd need to write a spec for that.  With a ML-KEM certificate, the certificate owner may not need signatures for its identity authentication.  For example, one can add an optional ML-KEM certificate in \"Key Exch\" in Figure 1, TLS 1.3, then the client never needs \"Certificate\" and \"CertificateVerify\", so the server never needs to ask for \"CertificateRequest\".  That is due to the MAC confirmation at the end of the handshake.   \r\n\r\nTo improve efficiency, the client just sends a hash of its certificate if the server saves the certificate for later connections.  If one uses PQ sig to sign the certificate, the certificate is big.  And most connections, the key exchanges do not have \"Certificate\" and \"CertificateVerify\" messages.  If one uses an ECC sig at this moment, then the size cost is basically the ML-KEM public key. \r\n\r\nOne can also do ephemeral key exchanges by sending a fresh public ML-KEM key a long with the certificate and this fresh public key will be used for the next connection. In the next connection, the certificate does not need to to be sent again, just send a new fresh public ML-KEM key for the future connection and the hash of the public key to be used for this current exchange.  But this method requires extensions and the server to save the future ML-KEM public key.  \r\n\r\nBut that way has PQ security for both (KEM and authentication) without needing PQ signatures to be exchanged for every connection because the authentication is from the security of ML-KEM and the MAC.  ",
          "createdAt": "2024-10-07T11:13:35Z",
          "updatedAt": "2024-10-07T11:13:35Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOM54HI859iDwh",
      "title": "Update draft-sfluhrer-cfrg-ml-kem-security-considerations.md",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/1",
      "state": "MERGED",
      "author": "QuynhDangNIST",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "sfluhrer"
      ],
      "labels": [],
      "body": "First quick pass to add new and proposed text changes to Scott's draft.\r\n\r\n",
      "createdAt": "2024-10-03T17:38:40Z",
      "updatedAt": "2024-10-04T18:09:21Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "5b7778eb6a0dc9e97b09ce72474def328d490766",
      "headRepository": "QuynhDangNIST/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "f4cd5411fb4ed56b856afc16c4f55b63b151e263",
      "closedAt": "2024-10-04T18:09:21Z",
      "mergedAt": "2024-10-04T18:09:21Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "072d7b8284788bd64ef36e88bd83e0b005cdb01a"
      },
      "comments": [
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "Looks mostly good.  I have a few tweaks - I'll merge and then do the few fixups needed",
          "createdAt": "2024-10-03T17:52:40Z",
          "updatedAt": "2024-10-03T17:52:40Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "Updates from Quynh",
          "createdAt": "2024-10-03T17:55:54Z",
          "updatedAt": "2024-10-03T17:55:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86L2qdd",
          "commit": {
            "abbreviatedOid": "de140de"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Looks mostly good. I have a few tweaks - I'll try to merge and then do the few fixups needed",
          "createdAt": "2024-10-03T18:03:49Z",
          "updatedAt": "2024-10-03T18:03:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOM54HI86L9sbl",
          "commit": {
            "abbreviatedOid": "a17fb50"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T14:21:38Z",
          "updatedAt": "2024-10-04T14:21:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOM54HI859nqlr",
      "title": "Try to fix build errors",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/2",
      "state": "OPEN",
      "author": "sfluhrer",
      "authorAssociation": "OWNER",
      "assignees": [
        "sfluhrer"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-04T13:04:00Z",
      "updatedAt": "2024-10-04T13:27:26Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "c061b81cb548155ab8a925fe5a85fbd5ce351168",
      "headRepository": "sfluhrer/ml-kem-security-considerations",
      "headRefName": "sfluhrer-build-fix",
      "headRefOid": "ea822556f4f1c80c1c3d24cf4d7ded05c61251ce",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "PR_kwDOM54HI859o4t3",
      "title": "Proposed wording for high-entrropy inputs, gender neutrality",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/4",
      "state": "MERGED",
      "author": "soatok",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Wording:\r\n\r\nHigh-quality entropy source is a first swing at an improvement.\r\n\r\nWe could lean into the NIST DRBG definitions if we wanted precise terminology, but I feel there's often a contention between precision and clarity, and security consideration documents scream \"focus on clarity\" to me.  I'm open to dissenting opinions here, of course.\r\n\r\nPronouns:\r\n\r\nThe adversary is not a specific actor and thus neutral pronouns (they'them) are more suitable. If a specific actor was in mind (e.g., Mallory), rather than just a vague \"adversary\", then this would be an incorrect change.",
      "createdAt": "2024-10-04T15:56:51Z",
      "updatedAt": "2024-10-04T19:20:43Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "afc77ef49f1deb83fe6f501b44ba73cc5d5d53a7",
      "headRepository": "soatok/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "137e8b52076468598a7c26a6027c57ca41cdbff6",
      "closedAt": "2024-10-04T17:11:35Z",
      "mergedAt": "2024-10-04T17:11:35Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "5b7778eb6a0dc9e97b09ce72474def328d490766"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86L--ND",
          "commit": {
            "abbreviatedOid": "137e8b5"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Now, the sentence you added is actually redundant with the previous sentence.  However, I have no issue with leaving it in there",
          "createdAt": "2024-10-04T16:57:10Z",
          "updatedAt": "2024-10-04T16:57:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOM54HI859rGjN",
      "title": "Update draft-sfluhrer-cfrg-ml-kem-security-considerations.md",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/5",
      "state": "MERGED",
      "author": "quynh97",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The sentence is not needed and it does not have a clear meaning with \"random\".  The strength of K, the shared secret key, is the strength of the random m.  The strength of the decryption key given the encryption key is the  difficulty of the LWE problem.",
      "createdAt": "2024-10-04T22:33:26Z",
      "updatedAt": "2024-10-05T11:02:33Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "4e0bff8d1ee2294f0da78a471ffec0ba1aa00457",
      "headRepository": "quynh97/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "513d14c16bfc7739d3467b9937d42bbc9f0dd142",
      "closedAt": "2024-10-05T11:02:32Z",
      "mergedAt": "2024-10-05T11:02:32Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "a9f52be20e7ed24fe14a1974c5152cbaf27c7b0f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86MCv64",
          "commit": {
            "abbreviatedOid": "513d14c"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-05T11:02:17Z",
          "updatedAt": "2024-10-05T11:02:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOM54HI859zygU",
      "title": "Update draft-sfluhrer-cfrg-ml-kem-security-considerations.md",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/6",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I looked through the document (as it looked yesterday) and made suggested changes. I made a spell check and made several changes to the markdown. I added a new Table showing performance, added references, and added more information on when ML-KEM is a drop-in replacement and when it is not.",
      "createdAt": "2024-10-07T12:23:48Z",
      "updatedAt": "2024-10-07T12:50:27Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "0dcd3b46153b4527fc1b6492cabf07d0b668d1bf",
      "headRepository": "emanjon/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "03f3e71e381e6fa1f1fa71a50040c4cb54269dc8",
      "closedAt": "2024-10-07T12:38:21Z",
      "mergedAt": "2024-10-07T12:38:21Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "55e4580ae440ab7709acf3634b5e947695d96003"
      },
      "comments": [
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "Thanks John",
          "createdAt": "2024-10-07T12:38:39Z",
          "updatedAt": "2024-10-07T12:38:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Do you want to be added to the authors list?\r\n\r\nYes please. But by approving the pull request I should already have been added. Thanks again for driving this.",
          "createdAt": "2024-10-07T12:50:25Z",
          "updatedAt": "2024-10-07T12:50:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86MLe7P",
          "commit": {
            "abbreviatedOid": "234fc65"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Do you want to be added to the authors list?",
          "createdAt": "2024-10-07T12:34:34Z",
          "updatedAt": "2024-10-07T12:34:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOM54HI85932Iz",
      "title": "Update draft-sfluhrer-cfrg-ml-kem-security-considerations.md",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/7",
      "state": "MERGED",
      "author": "kmilner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a very quick description that I think might be worth fleshing out more, but I think it's worth mentioning. \r\n\r\nAssociate references: \r\n- https://www.iacr.org/archive/pkc2019/114420193/114420193.pdf is I believe the original proposal of the attack.\r\n- https://eprint.iacr.org/2022/952.pdf uses rowhammer to actually perform the attack in practice on frodokem, but it also applies to ML-KEM as discussed in appendix A.1\r\n\r\nI'm not sure this warrants adding a name to the author list but Scott said to do so--happy to contribute more explanation or other editing to the document.",
      "createdAt": "2024-10-07T22:02:57Z",
      "updatedAt": "2024-10-11T19:38:32Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "13994f9c42d2d64cfd4b21e8790cb9a08e63c02b",
      "headRepository": "kmilner/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "04d774b59a7125923bf73ce77457330ef58008d6",
      "closedAt": "2024-10-11T19:38:31Z",
      "mergedAt": "2024-10-11T19:38:31Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "12810127a3e20f2d378201641b1778623d88b262"
      },
      "comments": [
        {
          "author": "kmilner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the advice would be to be protective about how your keys are generated in a way that may be unintuitive if you're used to traditional cryptosystems. Examples\r\n- An airgapped machine (or library) can generate 'valid' keypairs which allow an adversary to discover the private key later.\r\n- A user process on the machine can potentially interfere with key generation in such a way that the keys still work but are later breakable (the rowhammer paper above)\r\n- (assumption on my part, I don't know if there's literature on this) in an embedded environment power faults might be sufficient. \r\n\r\nYou could generally just mess with the entropy used in key generation to achieve a similar sort of 'booby-trapped' keys, though, so maybe it isn't worth calling out specifically. ",
          "createdAt": "2024-10-08T17:29:41Z",
          "updatedAt": "2024-10-08T17:29:41Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "The text you have is better; I would add two notes (and if you disagree with either of them, say so)\r\n- This is much less of a concern if you're using ML-KEM ephemerally (that is, using a public/private key pair only once)\r\n- If this is a concern, you should use an ML-KEM which has been hardened against such attacks.",
          "createdAt": "2024-10-09T21:04:19Z",
          "updatedAt": "2024-10-09T21:04:19Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "Thinking about it, I believe you have a good point.  I would propose this alternative text, which should more explicitly convey your concerns (and also when it is applicable, and also an actionable mitigation).  If you agree with this modified text, we can make that as your change (either you or I).  If you prefer your text, I'll go ahead and merge it.\r\n\r\nProposed alternative text:\r\n\r\nML-KEM has a potential weakness that did not apply to the classical DH or ECDH cryptosystems.  Lattice public keys are a lattice and a secret hidden by an error term. If the error term added public key generation stage is made larger due to a fault attack, then the success of decapsulation can reveal enough of the secret that successive queries determine the private key. That is, a public key can be 'poisoned' such that a future adversary can recover the private key even though it will appear correct in normal usage.  This applies only if an ML-KEM public key is used repeatedly.; it does not apply if ML-KEM is used ephemerally.  If that is the case, you may want to use an ML-KEM implementation that is hardened against such fault attacks.",
          "createdAt": "2024-10-10T16:27:03Z",
          "updatedAt": "2024-10-10T16:27:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86MUpDY",
          "commit": {
            "abbreviatedOid": "1cef240"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I\u2019m not sure it is worth mentioning.  \r\n\r\nThe goal of this draft is to give a security engineer who wants to use ML-KEM advice on how to use it safely.  Given this, what actionable advice could we give him?  ML-KEM is likely implemented by a crypto library - how can he ensure that the error vector is computed properly?  What steps could he take to mitigate this threat?\r\n",
          "createdAt": "2024-10-08T11:35:26Z",
          "updatedAt": "2024-10-08T11:35:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOM54HI8596728",
      "title": "Update draft-sfluhrer-cfrg-ml-kem-security-considerations.md",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/8",
      "state": "MERGED",
      "author": "dklshiu",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Added pieces on the importance of public key integrity, intermediate value deletion, checking for legitimate ciphertext generation. Also noted that DH is asynchronous and non-interactive whereas KEMs are not.",
      "createdAt": "2024-10-08T09:13:30Z",
      "updatedAt": "2024-10-10T16:40:52Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "e3a60b14813e22639f014005b2ea5b6aafe9eb7c",
      "headRepository": "dklshiu/ml-kem-security-considerations",
      "headRefName": "patch-1",
      "headRefOid": "8b22c7199eaf003067a72b695f835e96418a2dc8",
      "closedAt": "2024-10-10T16:40:52Z",
      "mergedAt": "2024-10-10T16:40:52Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "13994f9c42d2d64cfd4b21e8790cb9a08e63c02b"
      },
      "comments": [
        {
          "author": "dklshiu",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm trying to be as explicit as possible about the risks of public key modification in order to avoid future issues analagous to Curveball.  I've already had to try and warn people of the dangers of not explicitly protecting the decapsulator's copy of the public key https://crypto.stackexchange.com/questions/112925/why-is-the-public-key-included-in-the-private-key-in-kyber-kem/112927 and I fear that at some point in the future someone will ask if there's any issue with a \"compressed private key\" that omits the public key. In a similar vein, I worry that someone might notice that the re-encapsulation check never fails under ordinary circumstances and ask if there's an issue in skipping it. All this may be overcautious, but I've been burnt by people not fully understanding dangers in the past.",
          "createdAt": "2024-10-09T18:57:09Z",
          "updatedAt": "2024-10-09T18:57:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86MgKr6",
          "commit": {
            "abbreviatedOid": "880f995"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "I'm not sure I agree with the part you added about making sure that Alice gets a correct copy of the public key.  As you note later on, the private key includes a copy of the private key, and so (as long as the private key is secure) Alice has a correct copy of the public key.\r\n\r\nShould this part of the change be included (I have no issue with the rest)?",
          "createdAt": "2024-10-09T13:54:59Z",
          "updatedAt": "2024-10-09T13:54:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOM54HI86MuCqv",
          "commit": {
            "abbreviatedOid": "ecc43d7"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "You make good points.  I should remember the dangers of underestimating fools.",
          "createdAt": "2024-10-10T16:30:49Z",
          "updatedAt": "2024-10-10T16:30:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOM54HI85_oi3V",
      "title": "Line wrap",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/9",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To 77 chars for better editability and alignment with final render",
      "createdAt": "2024-10-23T15:06:38Z",
      "updatedAt": "2024-10-23T18:13:42Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "7b4720c065d752fa501cc73bcf581d5f26d92797",
      "headRepository": "dconnolly/ml-kem-security-considerations",
      "headRefName": "wrap",
      "headRefOid": "a95457c47c2f47b26f56609c767fab60ecc848cb",
      "closedAt": "2024-10-23T17:57:56Z",
      "mergedAt": "2024-10-23T17:57:56Z",
      "mergedBy": "sfluhrer",
      "mergeCommit": {
        "oid": "8c6cc706f78a98043e53acbb574a5715711123a9"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Planning on it too!",
          "createdAt": "2024-10-23T17:33:01Z",
          "updatedAt": "2024-10-23T17:33:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86ObaAk",
          "commit": {
            "abbreviatedOid": "a95457c"
          },
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Actually, I was hoping for more technical feedback, but I'll take reformatting as well.",
          "createdAt": "2024-10-23T17:31:46Z",
          "updatedAt": "2024-10-23T17:31:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOM54HI85_qly1",
      "title": "Binding properties",
      "url": "https://github.com/sfluhrer/ml-kem-security-considerations/pull/10",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Included an overview of binding properties for KEMs and for ML-KEM specifically.\r\n\r\n@bwesterb @sophieschmieg might have opinions to improve the text",
      "createdAt": "2024-10-23T18:52:16Z",
      "updatedAt": "2024-10-25T21:46:05Z",
      "baseRepository": "sfluhrer/ml-kem-security-considerations",
      "baseRefName": "main",
      "baseRefOid": "8c6cc706f78a98043e53acbb574a5715711123a9",
      "headRepository": "dconnolly/ml-kem-security-considerations",
      "headRefName": "binding",
      "headRefOid": "eae8003fc722fcf7e4d03d99707848a3122c243b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "I do not believe that ML-KEM suffers from reencapsulation attacks.  As such, I do not see the point in including an extended paragraph on them.  Remember, this is not about KEM's in general, but ML-KEM specifically. A more targeted paragraph (which mentions only those concerns specific to ML-KEM would be more reasonable.",
          "createdAt": "2024-10-23T19:10:08Z",
          "updatedAt": "2024-10-23T19:10:08Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I do not believe that ML-KEM suffers from reencapsulation attacks. As such, I do not see the point in including an extended paragraph on them. Remember, this is not about KEM's in general, but ML-KEM specifically. A more targeted paragraph (which mentions only those concerns specific to ML-KEM would be more reasonable.\r\n\r\nThe mention is a motivation for binding properties in general, and an earlier version of Signal PQXDH using a regular IND-CCA KEM was vulnerable to such an attack - they were saved by using an earlier version of Kyber, in part, but had to commit to more information in their AAD to mitigate it completely. They are relevant in how the recommended use of ML-KEM as now standardized in FIPS 203 is safe, but using another KEM in a similar way may not be (because IND-CCA is insufficient). We can pare it down though.",
          "createdAt": "2024-10-23T19:16:40Z",
          "updatedAt": "2024-10-23T19:16:40Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "The other issue is that this is mainly advice for protocol designers (and to a lesser extend, implementors).  If there is something they may need to be aware of (e.g. MAL-BIND-K-KT), we should explain what it is (in addition to pointing them to some academic paper they will have trouble understanding), when that threat is relevant, and how to mitigate that threat.",
          "createdAt": "2024-10-23T19:20:24Z",
          "updatedAt": "2024-10-23T19:20:24Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The other issue is that this is mainly advice for protocol designers (and to a lesser extend, implementors). If there is something they may need to be aware of (e.g. MAL-BIND-K-KT), we should explain what it is (in addition to pointing them to some academic paper they will have trouble understanding), when that threat is relevant, and how to mitigate that threat.\r\n\r\nYes, that is basically done in the ML-KEM-specific section at the end",
          "createdAt": "2024-10-23T19:40:29Z",
          "updatedAt": "2024-10-23T19:40:29Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "As written, I don't think its targeted towards the right audience; it should be towards protocol designers and protocol implementors. They don't care about learning about cryptography, they want explicit instructions about what they should do.  As such, we need to be much more explicit about exactly what these threats are, when they are relevant and how to mitigate them (and the advice 'use the 64 byte seed as the private' might not be doable, as the readers might not be able to control how their ML-KEM implementation functions - we should mention it, but realize that they might need an alternative).\r\n\r\nThinking it over, we might need to be more explicit about the various use cases for ML-KEM (I can think of four: key exchange/ephemeral, key exchange/static public key, public key encryption, and authentication) - whether the threats apply varies between the use cases.  [And, of course, if you can think of other use cases, please chime in].\r\n\r\nThis is a fairly large change; I'll go ahead and propose a rewrite - it'll take me a few days, though.  And, since we're in the IETF quiet period (no new submissions allowed until after Dublin), we have time...",
          "createdAt": "2024-10-24T13:19:42Z",
          "updatedAt": "2024-10-24T13:19:42Z"
        },
        {
          "author": "sfluhrer",
          "authorAssociation": "OWNER",
          "body": "I've been going through it, and it's hard to come up with a plausible scenario where either MAL-BIND-K-CT nor MAL-BIND-K-PK is a threat (even in the case where ML-KEM is used for authentication). Both attack models assume that the adversary is either the private key holder, or can inject bogus private keying material).  However if they can pick the private key, well, they can already do pretty much what they want anyways (and so you don't have security in any case).\r\n\r\nIf we can't think of cases where these security properties might be needed, I don't know if they need to be mentioned.  Remember, this is not an academic paper - this tries to instruct protocol designers and implementors about things they need to keep in mind, and there's little point in having them worry about things that aren't actually a concern.\r\n\r\nAm I missing something?",
          "createdAt": "2024-10-25T21:46:03Z",
          "updatedAt": "2024-10-25T21:46:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOM54HI86OesIp",
          "commit": {
            "abbreviatedOid": "865d73c"
          },
          "author": "danvangeest",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T20:24:43Z",
          "updatedAt": "2024-10-23T20:24:43Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nPer the analysis of the final {{FIPS203}} in Sophie Schmieg\u2019s [KEMMY24], a\r\n```",
              "createdAt": "2024-10-23T20:24:43Z",
              "updatedAt": "2024-10-23T20:24:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOM54HI86OevwC",
          "commit": {
            "abbreviatedOid": "865d73c"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T20:26:25Z",
          "updatedAt": "2024-10-23T20:26:25Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "Ah thank you, whoops ",
              "createdAt": "2024-10-23T20:26:25Z",
              "updatedAt": "2024-10-23T20:26:25Z"
            }
          ]
        }
      ]
    }
  ]
}